datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Account {
  id       String @id @default(cuid())
  name     String
  users    User[]
  settings String @default("{}")

  mediavaletIntegrationStatus String? @default("unconnected")
  mediavaletRefreshToken      String?
  mediavaletToken             String?
  mediavaletTokenExpiry       String?
  mediavaletRootCategoryId    String? @unique


  docusignIntegrationStatus String? @default("unconnected")
  docusignAuthToken         String?
  docusignAuthTokenExpiry   String?

  esriIntegrationStatus String? @default("unconnected")
}

model User {
  id                       String                    @id @default(cuid())
  name                     String
  email                    String                    @unique
  role                     Int                       @default(1)
  account                  Account                   @relation(fields: [accountId], references: [id])
  accountId                String
  CameraTrapBatchApprovals CameraTrapBatchApproval[]
  hashedPassword           String
  salt                     String
  resetToken               String?
  resetTokenExpiresAt      DateTime?
}

model CameraTrap {
  id       String            @id @default(cuid())
  deviceId String            @unique
  batches  CameraTrapBatch[]
  events   CameraTrapEvent[]
  photos   Photo[]

  // mediavaletCategory          MediavaletCategory? @relation(fields: [mediavaletCategoryId], references: [id])
  mediavaletCategoryId        String?             @unique
  mediavaletDownloadsFolderId String?             @unique
}

model CameraTrapEvent {
  id   String   @id @default(cuid())
  date DateTime

  cameraTrap   CameraTrap @relation(fields: [cameraTrapId], references: [id])
  cameraTrapId String

  projectName String? @default("-")
  staffName   String? @default("-")

  datetime_updated DateTime
  cameraLocation   String
  cameraProcedure  String
  //    battery_memory_replacement
  //    camera_moved
  //    camera_removed
  //    camera_stolen
  // 	  camera_other_update

  cameraAttachmentPosition String?
  //    tree
  // 	  post
  // 	  other_position

  cameraHeight Decimal?
  areaDeployed String?
  cameraMake   String?
  // 	  ·   Browning browning
  // 	  ·   Bushnell bushnell
  // 	  ·   Cuddeback cuddeback
  // 	  ·   Moultrie moultrie
  // 	  ·   Reconyx reconyx
  // 	  ·   Spypoint spypoint
  // 	  ·   Other camera_make_other String

  cameraTarget String?
  // 	  ·   Wildlife trail Wildlife trail
  // 	  ·   Wildlife feeding area Wildlife feeding area
  // 	  ·   Rubbing posts Rubbing posts
  // 	  ·   Water hole Water hole
  // 	  ·   Human trail Human trail
  // 	  ·   Road _Road
  // 	  ·   Other other_feature String

  cameraSitePhoto String?
  cameraWorking   Boolean
  comments        String?
}

model CameraTrapBatch {
  id        String   @id @default(cuid())
  dateStart DateTime
  dateEnd   DateTime

  cameraTrap   CameraTrap @relation(fields: [cameraTrapId], references: [id])
  cameraTrapId String

  // mediavaletCategory   MediavaletCategory? @relation(fields: [mediavaletCategoryId], references: [id])
  mediavaletCategoryId String?             @unique

  photos Photo[]

  location                 String
  cameraTrapBatchApprovals CameraTrapBatchApproval[]
  status                   String                    @default("approval")
}

model CameraTrapBatchApproval {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  batchId         String
  cameraTrapBatch CameraTrapBatch @relation(fields: [batchId], references: [id])
  approvedImages  String
  rejectedImages  String
}

model Photo {
  id   String   @id @default(cuid())
  date DateTime

  cameraTrap   CameraTrap @relation(fields: [cameraTrapId], references: [id])
  cameraTrapId String

  cameraTrapBatch   CameraTrapBatch? @relation(fields: [cameraTrapBatchId], references: [id])
  cameraTrapBatchId String

  assetId String?          @unique
  // asset   MediavaletAsset? @relation(fields: [assetId], references: [id])
}

// model MediavaletAsset {
//   id           String  @id
//   title        String  @default("")
//   thumb        String
//   small        String
//   medium       String
//   large        String
//   original     String
//   categories   String? @default("")
//   description  String? @default("")
//   altText      String? @default("")
//   dateCaptured String?
//   photo        Photo?
// }

// model MediavaletCategory {
//   id         String           @id
//   name       String
//   parentId   String
//   batch      CameraTrapBatch?
//   cameraTrap CameraTrap?
// }
