datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Account {
  id       String @id @default(cuid())
  name     String
  users    User[]
  settings String @default("{}")

  mediavaletIntegrationStatus String? @default("unconnected")
  mediavaletRefreshToken      String?
  mediavaletToken             String?
  mediavaletTokenExpiry       String?
  mediavaletRootCategoryId    String? @unique


  docusignIntegrationStatus String? @default("unconnected")
  docusignAuthToken         String?
  docusignAuthTokenExpiry   String?

  esriIntegrationStatus String? @default("unconnected")
}

model User {
  id                       String                    @id @default(cuid())
  name                     String
  email                    String                    @unique
  role                     Int                       @default(1)
  account                  Account                   @relation(fields: [accountId], references: [id])
  accountId                String
  CameraTrapBatchApprovals CameraTrapBatchApproval[]
  hashedPassword           String
  salt                     String
  resetToken               String?
  resetTokenExpiresAt      DateTime?
}

model CameraTrap {
  id           String            @id @default(cuid())
  deviceId     String            @unique
  manufacturer String            @default("gardepro")
  project      String?
  batches      CameraTrapBatch[]
  events       CameraTrapEvent[]
  photos       Photo[]

  // mediavaletCategory          MediavaletCategory? @relation(fields: [mediavaletCategoryId], references: [id])
  mediavaletCategoryId        String? @unique
  mediavaletDownloadsFolderId String? @unique
  mediavaletProcessedFolderId String? @unique
}

model CameraTrapEvent {
  areaDeployed             String?
  cameraAttachmentPosition String?
  cameraHeight             Decimal?
  cameraLocation           String
  cameraLocationX          Decimal?
  cameraLocationY          Decimal?
  cameraMake               String?
  cameraProcedure          String
  cameraSitePhoto          String?
  cameraTarget             String?
  cameraTrap               CameraTrap? @relation(fields: [cameraTrapId], references: [id])
  cameraTrapId             String?
  cameraWorking            Boolean
  comments                 String?
  date                     DateTime
  datetimeUpdated          DateTime
  deviceId                 String
  gisLink                  String?
  id                       String      @id @default(cuid())
  projectName              String?     @default("-")
  staffName                String?     @default("-")
  userEmail                String?
  userFullname             String?
  userUsername             String?
}

model CameraTrapBatch {
  id        String   @id @default(cuid())
  dateStart DateTime
  dateEnd   DateTime
  cameraTrap   CameraTrap @relation(fields: [cameraTrapId], references: [id])
  cameraTrapId String
  photos Photo[]
  location                 String
  cameraTrapBatchApprovals CameraTrapBatchApproval[]
  status                   String                    @default("approval")
  eventStartId             String? @unique @map("")
  eventEndId               String? @unique
}

model CameraTrapBatchApproval {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  batchId         String
  cameraTrapBatch CameraTrapBatch @relation(fields: [batchId], references: [id])
  approvedImages  String
  rejectedImages  String
}

model Photo {
  id   String   @id @default(cuid())
  date DateTime

  cameraTrap   CameraTrap @relation(fields: [cameraTrapId], references: [id])
  cameraTrapId String

  cameraTrapBatch   CameraTrapBatch? @relation(fields: [cameraTrapBatchId], references: [id])
  cameraTrapBatchId String?

  assetId     String? @unique
  title       String  @default("")
  description String? @default("")
  altText     String? @default("")
  thumb       String
  small       String
  medium      String
  large       String
  original    String
}
